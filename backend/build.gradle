buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'org.springframework.boot' version "$springBootVersion"
    id 'io.spring.dependency-management' version "$springDependencyVersion"
    id 'java'
    id "org.sonarqube" version "$sonarqubeVersion"
    id 'jacoco'
}

group = 'ulviibadov'
version = "$projectVersion"
sourceCompatibility = "$sourceCompatibility"

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-tomcat', version: '2.7.0'
    implementation "org.springframework.boot:spring-boot-starter-validation:$validationVersion"
    implementation "net.logstash.logback:logstash-logback-encoder:$logbackEncoderVersion"
    implementation 'ch.qos.logback:logback-classic'
    implementation 'org.jetbrains:annotations:19.0.0'
    implementation group: 'javax.xml.bind', name: 'jaxb-api', version: "$jaxbVersion"
    implementation group: 'mysql', name: 'mysql-connector-java', version: '8.0.23'
    implementation group: 'org.modelmapper', name: 'modelmapper', version: "$modelMapper"
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: "$starterOpenFeign"
    implementation "org.apache.commons:commons-lang3:${apacheCommonVersion}"
    implementation "io.github.openfeign:feign-okhttp:$okHttpVersion"
    implementation "io.github.openfeign:feign-gson:$gsonVersion"
    implementation 'org.mockito:mockito-core:3.3.3'
    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

}

sonarqube {
    properties {
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.jacoco.reportPath", "build/jacoco/test.exec"
        property "sonar.junit.reportsPath", "build/test-results/test"
        property 'sonar.coverage.jacoco.xmlReportPaths', '${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml'
        property "sonar.projectKey", rootProject.name
        property "sonar.scm.forceReloadAll", "true"
        property 'sonar.coverage.exclusions',
                "**/az/phonebook/backend/controller/*," +
                        "**/az/phonebook/backend/*," +
                        "**/az/phonebook/backend/dto/*," +
                        "**/az/phonebook/backend/entity/*," +
                        "**/az/phonebook/backend/enums/*," +
                        "**/az/phonebook/backend/exceptions/*," +
                        "**/az/phonebook/backend/logger/*," +
                        "**/az/phonebook/backend/repository/*," +
                        "**/az/phonebook/backend/utility/*," +
                        "**/az/phonebook/backend/handlers/*,"
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${releaseTrainVersion}"
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${releaseTrainVersion}"
    }
}

test {
    useJUnitPlatform()
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
    }
}

springBoot {
    buildInfo()
}

bootJar {
    archiveName 'app.jar'
}
